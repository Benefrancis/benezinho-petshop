{
	"info": {
		"_postman_id": "acc41dc3-2393-40b2-8e9f-c0064a34279f",
		"name": "Benezinho-petshop",
		"description": "# Benezinho Petshop ü§ìüëçüèæ\n\nCHECKPOINT - Enterprise Application Development aplicado em 04/10/2023.\n\n|  | **Enterprise Application Development** |\n| --- | --- |\n| **ALUNO:** | **TURMA:** 2TDSPR - 2TDSPT |\n| **PROFESSOR:** Benefrancis do Nascimento | 04/10/2023 |\n| **Checkpoint** |  |\n\n# Sum√°rio\n\n[Estudo de caso](#_Estudo_de_caso)\n\n[O que dever√° ser feito?](#_O_que_devera_ser_feito)\n\n[Diagrama de Classes](#_Diagrama_de_Classes)\n\n[Corre√ß√£o](#_Correcao)\n\n<a href=\"null\"></a>\n\n# Estudo de caso\n\nA Holding Benezinho\n\n<img src=\"RackMultipart20230510-1-eptqiz_html_5188b812c34f88e5.png\">\n\ndeseja atuar no ramo de Petshop fornecendo serv√ßos de Banho, Tosa, Vacina√ß√£o e Consultas Veterin√°rias, entretanto n√£o conseguiu encontrar no mercado um sistema para gerir este novo neg√≥cio.  \nContratamos voc√™ como Engenheiro de Software para ajudar a construir esse sistema.\n\nNa sprint atual, voc√™ foi incumbido de fazer:\n\n1. O Mapeamento Objeto Relacional das primeiras classes envolvidas neste projeto de software;\n2. A cria√ß√£o automatizada das tabelas no banco de dados Oracle;\n3. A persist√™ncia de todos os dados, e;\n4. A cria√ß√£o de dos m√©todos capazes de realizar opera√ß√µes no reposit√≥rio respeitando a interface gen√©rica Repository:\n    \n    ```\n           1. Consulta todos os objetos findAll;\n           2. Consulta Objeto pelo Id findById;\n           3. Consulta Objeto pelo texto (nome, tipo de Servi√ßo, numero de documento ou numero de telefone) conforme o caso;\n           4. Persist√™ncia do Objeto;\n           5. Altera√ß√£o do Objeto;\n           6. Exclus√£o do Objeto.\n    \n     ```\n    \n\n<a href=\"null\"></a>\n\n# O que dever√° ser feito?\n\n**Fa√ßa o Fork do projeto no github do professor :**\n\n[https://github.com/Benefrancis/benezinho-petshop.git](https://github.com/Benefrancis/benezinho-petshop.git)\n\nCaso o github esteja indispon√≠vel, voc√™ dever√° pegar o projeto no diret√≥rio compartilhado.\n\n**Voc√™ dever√°:**\n\nAlterar o arquivo contido em documentacao/equipe.txt para incluir os RMs e nomes e turma da dupla que far√° esta atividade.\n\n1. **(0,5 Ponto)** acessar o arquivo persistence.xml e alterar as configura√ß√µes da **persistence-unit** para que seja poss√≠vel conectar-se ao banco de dados Oracle da FIAP com o seu usu√°rio e senha (manter o seu usu√°rio e senha ativo √© sua responsabilidade). N√£o utilize o usu√°rio e senha de outro aluno. Caso tenha problema para autenticar, comunique o professor.\n2. **(2,5 Pontos)** adicionar corretamente as anota√ß√µes JPA na classe **Animal**.Lembre-se que:\n    1. Existe Herna√ßa entre **Animal**, **Cachorro** e **Gato**\n    2. Existe relacionamento **Muitos para Muitos** entre **Animal** e **Servico** no atributo servicos.\n    3. Existe relacionamento **Muitos para Um** entre **Animal** e **Pessoa** a no atributo dono.\n3. **(2 Ponto)** adicionar corretamente as anota√ß√µes JPA na classe **Servico**.Lembre-se que:\n    1. Existe Herna√ßa entre **Servico**, **Banho**, **Consulta** e **Tosa**\n    2. Existe relacionamento Muitos para Um entre Servico e Animal no atributo animal.\n4. **(1,5 Pontos)** adicionar corretamente as anota√ß√µes JPA na classe **Documento**.Lembre-se que:\n    1. Existe relacionamento **Muitos para Um** entre Documento e Pessoa no atributo pessoa.\n5. **(1,5 Ponto)** adicionar corretamente as anota√ß√µes JPA na classe **Telefone**.  \n    Lembre-se que:\n    1. Existe relacionamento **Muitos para Um** entre Telefone e Pessoa no atributo pessoa.\n6. **(2 Pontos)** Implementar corretamente os m√©todos das classes que devem implementar a interface gen√©rica **Repository**  \n    Dever√° implementar:\n    1. AnimalRepository;\n    2. ServicoRepository;\n    3. DocumentoRepository;\n    4. TelefoneRepository;\n\n<a href=\"null\"></a>\n\n# Diagrama de Classes de Dom√≠nio\n\n<img src=\"documentacao/uml/domain.png\">\n\n<img src=\"https://content.pstmn.io/7ce8d1e1-0026-428e-bfcb-c294139cf53c/ZG9tYWluLnBuZw==\" alt=\"\">\n\n# Diagrama de Classes de Infra e Seguran√ßa\n\n<img src=\"documentacao/uml/security.png\">\n\n<img src=\"https://content.pstmn.io/2d4147de-75e2-4643-8d59-8628ac94f026/c2VjdXJpdHkucG5n\" alt=\"\">\n\n<a href=\"null\"></a>\n\n# Corre√ß√£o da Prova\n\nA corre√ß√£o da prova ser√° disponibilizada no github do professor (branch correcao):\n\nPara acessar digite no prompt:\n\n``` shell\ngit clone https://github.com/Benefrancis/benezinho-petshop.git && cd benezinho-petshop && git checkout correcao\n\n ```\n\nA atividade √© em dupla, em caso de fraude de qualquer tipo todos os envolvidos receber√£o nota ZERO.\n\nBoa prova.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1524675"
	},
	"item": [
		{
			"name": "001 - USU√ÅRIO",
			"item": [
				{
					"name": "PF",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Benefrancis do Nascimento\",\r\n    \"nascimento\": \"1977-03-08\",\r\n    \"cpf\": \"23872891864\",\r\n    \"sexo\": \"MASCULINO\",\r\n    \"email\": \"benefrancis@gmail.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/api/pf",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"pf"
							]
						}
					},
					"response": []
				},
				{
					"name": "PF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate that the response is an array\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Validate 'cpf' is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.cpf).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/api/pf",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"pf"
							]
						}
					},
					"response": []
				},
				{
					"name": "PF/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is an array\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Response array is empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the response is not null\", function () {",
									"  pm.expect(pm.response.json()).to.not.be.null;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/api/pf/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"pf",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "PJ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response array is empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    pm.expect(responseData).to.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the structure of the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"        pm.expect(item.id).to.exist.and.to.be.a('string');\r",
									"        pm.expect(item.name).to.exist.and.to.be.a('string');\r",
									"        pm.expect(item.date).to.exist.and.to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response array is not null or undefined\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.not.be.null;\r",
									"    pm.expect(responseData).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response array contains only objects\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.be.an('object');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response array does not contain any duplicate items\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    const uniqueItems = new Set(responseData);\r",
									"    pm.expect(uniqueItems.size).to.equal(responseData.length, \"Array contains duplicate items\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response array is sorted in ascending order by id\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    \r",
									"    if (responseData.length > 1) {\r",
									"        for (let i = 0; i < responseData.length - 1; i++) {\r",
									"            pm.expect(responseData[i].id).to.be.at.most(responseData[i + 1].id);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpdGllcyI6W3siaWQiOjEsIm5vbWUiOiJjbGllbnRlIn1dLCJwZXNzb2EiOiJCZW5lZnJhbmNpcyBkbyBOYXNjaW1lbnRvIiwiZXhwIjoxNjk2NjQ1NDEwfQ.-S1KlHDh0isleWYjeOGJJD9-gawJnjmG3ctcUzwSNzM",
									"type": "string"
								},
								{
									"key": "key",
									"value": "privateKey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/api/pj",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"pj"
							]
						}
					},
					"response": []
				},
				{
					"name": "PJ/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is an array\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array').that.is.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify response headers\", function () {\r",
									"    pm.response.headers.each(function (header) {\r",
									"        switch (header.key) {\r",
									"            case \"Content-Type\":\r",
									"                pm.expect(header.value).to.include(\"application/json\");\r",
									"                break;\r",
									"            case \"Access-Control-Allow-Origin\":\r",
									"                pm.expect(header.value).to.include(\"*\");\r",
									"                break;\r",
									"            case \"Cache-Control\":\r",
									"                pm.expect(header.value).to.include(\"no-cache, no-store, must-revalidate\");\r",
									"                break;\r",
									"            // Add more cases for other expected headers if needed\r",
									"        }\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify the response body length is 0\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('array').and.to.have.lengthOf(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the 'Content-Type' header is present and has the value 'application/json'\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.equal('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify Access-Control-Allow-Origin header\", function () {\r",
									"  pm.expect(pm.response.headers.has(\"Access-Control-Allow-Origin\")).to.be.true;\r",
									"  pm.expect(pm.response.headers.get(\"Access-Control-Allow-Origin\")).to.equal(\"*\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the Cache-Control header is present and has the value 'no-cache, no-store, must-revalidate'\", function () {\r",
									"    pm.response.headers.has(\"Cache-Control\");\r",
									"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.equal(\"no-cache, no-store, must-revalidate\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the 'Content-Length' header is present and has the value 0\", function () {\r",
									"    pm.expect(pm.response.headers.has('Content-Length')).to.be.true;\r",
									"    pm.expect(pm.response.headers.get('Content-Length')).to.equal('0');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpdGllcyI6W3siaWQiOjEsIm5vbWUiOiJjbGllbnRlIn1dLCJwZXNzb2EiOiJCZW5lZnJhbmNpcyBkbyBOYXNjaW1lbnRvIiwiZXhwIjoxNjk2NjQ1NDEwfQ.-S1KlHDh0isleWYjeOGJJD9-gawJnjmG3ctcUzwSNzM",
									"type": "string"
								},
								{
									"key": "key",
									"value": "privateKey",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/api/pj/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"pj",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "PJ",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpdGllcyI6W3siaWQiOjEsIm5vbWUiOiJjbGllbnRlIn1dLCJwZXNzb2EiOiJCZW5lZnJhbmNpcyBkbyBOYXNjaW1lbnRvIiwiZXhwIjoxNjk2NjQ1NDEwfQ.-S1KlHDh0isleWYjeOGJJD9-gawJnjmG3ctcUzwSNzM",
									"type": "string"
								},
								{
									"key": "key",
									"value": "privateKey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Benezinho Holding SA\",\r\n    \"nascimento\": \"2000-03-08\",\r\n    \"cnpj\": \"010223872891864\",\r\n    \"email\": \"holding@benezinho.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/api/pj",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"pj"
							]
						}
					},
					"response": []
				},
				{
					"name": "PJ BANK",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpdGllcyI6W3siaWQiOjEsIm5vbWUiOiJjbGllbnRlIn1dLCJwZXNzb2EiOiJCZW5lZnJhbmNpcyBkbyBOYXNjaW1lbnRvIiwiZXhwIjoxNjk2NjQzNjgwfQ.GkYQZKpivzDeL2aGUa5sYdjgFwrZ8WVAolgvmdh9CKo",
									"type": "string"
								},
								{
									"key": "key",
									"value": "privateKey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Benezinho Bank SA\",\r\n    \"nascimento\": \"2000-03-08\",\r\n    \"cnpj\": \"010223872891854\",\r\n    \"email\": \"bank@benezinho.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/api/pj",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"pj"
							]
						}
					},
					"response": []
				}
			],
			"description": "Voc√™ pode cadastrar um novo usu√°rio:\n\n<img src=\"https://content.pstmn.io/f101bef4-96f8-4933-ac5d-7aa1a2f5d807/aW1hZ2UucG5n\" alt=\"Exemplo%20de%20como%20se%20cadastra%20um%20usu√°rio\" width=\"2015\" height=\"531\">"
		},
		{
			"name": "002 - Autentica√ß√£o",
			"item": [
				{
					"name": "LOGIN PF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the authorities object\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.authorities).to.exist.and.to.be.an('array').that.is.not.empty;\r",
									"  \r",
									"  responseData.authorities.forEach(function(authority) {\r",
									"    pm.expect(authority).to.be.an('object');\r",
									"    pm.expect(authority.id).to.exist.and.to.be.a('number');\r",
									"    pm.expect(authority.nome).to.exist.and.to.be.a('string');\r",
									"  });\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the authorization field is not empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.authorization).to.exist.and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"The id field is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0, \"Value should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate the password field is not empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  pm.expect(responseData.password).to.exist.and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"// Test for common fields\r",
									"pm.test(\"Validate common fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.username).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.pessoa).to.exist.and.to.be.a('number');\r",
									"});\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the 'authorities' array\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.authorities).to.be.an('array');\r",
									"    responseData.authorities.forEach(function(authority) {\r",
									"        pm.expect(authority).to.be.an('object');\r",
									"        pm.expect(authority.id).to.exist.and.to.be.a('number');\r",
									"        pm.expect(authority.nome).to.exist.and.to.be.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the authorization field\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.authorization).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the 'id' field\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the password field\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"\r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.password).to.exist.and.to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"benefrancis@gmail.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/api/authorization",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"authorization"
							]
						}
					},
					"response": []
				},
				{
					"name": "LOGIN PJ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the authorities object\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.authorities).to.exist.and.to.be.an('array').that.is.not.empty;\r",
									"  \r",
									"  responseData.authorities.forEach(function(authority) {\r",
									"    pm.expect(authority).to.be.an('object');\r",
									"    pm.expect(authority.id).to.exist.and.to.be.a('number');\r",
									"    pm.expect(authority.nome).to.exist.and.to.be.a('string');\r",
									"  });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the authorization field is not empty\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.authorization).to.exist.and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"The id field is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.id).to.be.at.least(0, \"Value should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Validate the password field is not empty\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.password).to.exist.and.to.not.be.empty;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "eyJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpdGllcyI6W3siaWQiOjEsIm5vbWUiOiJjbGllbnRlIn1dLCJwZXNzb2EiOiJCZW5lZnJhbmNpcyBkbyBOYXNjaW1lbnRvIiwiZXhwIjoxNjk2NjM1NjQ1fQ.xQJ8ApKqFhlyBnlxN7g-fWTnRdPALjLqkJToh4tMHg8",
									"type": "string"
								},
								{
									"key": "key",
									"value": "privateKey",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"holding@benezinho.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/api/authorization",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"authorization"
							]
						}
					},
					"response": []
				}
			],
			"description": "Realize a autentica√ß√£o na API Benezinho - Petshop\n\n  \n\n<img src=\"https://content.pstmn.io/f82895d8-eefd-49a7-9a6e-de7c9ef3ca26/aW1hZ2UucG5n\" alt=\"Exemplo%20de%20como%20se%20realiza%20uma%20autentica√ß√£o\" height=\"657\" width=\"2005\">"
		},
		{
			"name": "003 - ANIMAL",
			"item": [
				{
					"name": "PERSISTE",
					"item": [
						{
							"name": "CACHORRO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.expect(pm.response.code).to.equal(201);",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.dono).to.exist.and.to.be.an('object');",
											"  pm.expect(responseData.dono.email).to.exist.and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
											"});",
											"",
											"",
											"pm.test(\"Validate that 'nascimento' is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.nascimento).to.be.a('string').and.to.have.lengthOf.at.least(1, \"'nascimento' should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Validate 'nome' is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Validate that 'dono' object is present in the response\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.dono).to.exist.and.to.be.an('object');",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'nome' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'raca' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.raca).to.exist.and.to.be.a('string');",
											"    pm.expect(responseData.raca).to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Verify that 'tipo' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.tipo).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"dono\": {\r\n        \"id\": 1\r\n    },\r\n    \"nascimento\": \"2023-10-05\",\r\n    \"nome\": \"Pith\",\r\n    \"raca\": \"Bull\",\r\n    \"servicos\": null,\r\n    \"sexo\": \"FEMININO\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/cachorro",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"cachorro"
									]
								}
							},
							"response": []
						},
						{
							"name": "GATO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData.dono.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
											"});",
											"",
											"",
											"pm.test(\"The id and cpf fields in the dono object are non-negative integers\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.dono).to.be.an('object');",
											"    pm.expect(responseData.dono.id).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");",
											"    pm.expect(responseData.dono.cpf).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");",
											"});",
											"pm.test(\"Response has the required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('dono');",
											"    pm.expect(responseData).to.have.property('nascimento');",
											"    pm.expect(responseData).to.have.property('nome');",
											"    pm.expect(responseData).to.have.property('raca');",
											"    pm.expect(responseData).to.have.property('sexo');",
											"    pm.expect(responseData).to.have.property('tipo');",
											"});",
											"",
											"",
											"pm.test(\"Email field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.dono.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email field should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"The nome field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.nome).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"The sexo field should be either 'M' or 'F'\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.sexo).to.be.oneOf(['M', 'F']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"dono\": {\r\n        \"id\": 1\r\n    },\r\n    \"nascimento\": \"2020-10-05\",\r\n    \"nome\": \"Miauuuuuuu\",\r\n    \"raca\": \"Ciberiano\",\r\n    \"servicos\": null,\r\n    \"sexo\": \"MASCULINO\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/gato",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"gato"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CONSULTA",
					"item": [
						{
							"name": "cachorro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  responseData.forEach(function (dog) {",
											"    pm.expect(dog.id).to.be.a('number');",
											"    pm.expect(dog.id).to.be.at.least(0, \"ID should be a non-negative integer\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Nascimento is in a valid date format\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function (item) {",
											"        pm.expect(item.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"    });",
											"});pm.test(\"Response is an array\", function () {",
											"    pm.expect(pm.response.json()).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Each dog has a non-empty name\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.forEach(function (dog) {",
											"        pm.expect(dog.nome).to.be.a('string').and.to.not.be.empty;",
											"    });",
											"});",
											"",
											"pm.test(\"Each dog has a non-empty race\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.forEach(function (dog) {",
											"        pm.expect(dog.raca).to.be.a('string').and.to.not.be.empty;",
											"    });",
											"});",
											"",
											"pm.test(\"Each dog has a non-empty sex\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.forEach(function (dog) {",
											"        pm.expect(dog.sexo).to.be.a('string').and.to.not.be.empty;",
											"    });",
											"});",
											"",
											"pm.test(\"Each dog has a non-empty type\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.forEach(function (dog) {",
											"        pm.expect(dog.tipo).to.be.a('string').and.to.not.be.empty;",
											"    });",
											"});",
											"",
											"pm.test(\"Each dog's owner has a non-empty name\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.forEach(function (dog) {",
											"        pm.expect(dog.dono.nome).to.be.a('string').and.to.not.be.empty;",
											"    });",
											"});",
											"",
											"pm.test(\"Each dog's owner has a valid email format\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.forEach(function (dog) {",
											"        pm.expect(dog.dono.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
											"    });",
											"});",
											"pm.test(\"Response has the required fields\", function () {",
											"  const responseData = pm.response.json();",
											"  const requiredFields = [\"id\", \"nome\", \"raca\", \"sexo\", \"tipo\", \"dono\"];",
											"",
											"  pm.expect(responseData).to.be.an('array');",
											"",
											"  responseData.forEach(function (cachorro) {",
											"    pm.expect(cachorro).to.be.an('object');",
											"",
											"    requiredFields.forEach(function (field) {",
											"      pm.expect(cachorro[field]).to.exist;",
											"    });",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"ID is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Nascimento is in a valid date format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  ",
											"  responseData.forEach(function(cachorro) {",
											"    pm.expect(cachorro.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Each dog's owner has a non-empty CPF\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('array');",
											"",
											"  responseData.forEach(function(dog) {",
											"    pm.expect(dog.dono).to.exist;",
											"    pm.expect(dog.dono.cpf).to.exist.and.to.have.lengthOf.at.least(1, \"CPF should not be empty\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"Each dog's owner has a non-empty sex\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
											"    ",
											"    responseData.forEach(function (dog) {",
											"        pm.expect(dog.dono).to.exist;",
											"        pm.expect(dog.dono.sexo).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost/api/cachorro",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"cachorro"
									]
								}
							},
							"response": []
						},
						{
							"name": "gato",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    responseData.forEach(function (gato) {",
											"        pm.expect(gato.dono.email).to.match(/\\S+@\\S+\\.\\S+/);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
											"  const responseData = pm.response.json();",
											"",
											"  pm.expect(responseData).to.be.an('array');",
											"  responseData.forEach(function (item) {",
											"    pm.expect(item.id).to.be.a('number').and.to.be.at.least(0, \"'id' field should be a non-negative integer\");",
											"  });",
											"});",
											"",
											"",
											"pm.test(\"The 'nome' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('array');",
											"    responseData.forEach(function (item) {",
											"        pm.expect(item.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"The 'nascimento' field is in a valid date format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('array');",
											"  ",
											"  responseData.forEach(function(gato) {",
											"    pm.expect(gato.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
											"  });",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost/api/gato",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"gato"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "UPDATE",
					"item": [
						{
							"name": "CACHORRO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.dono.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
											"});",
											"",
											"",
											"pm.test(\"Verify that the 'id' field is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.id).to.be.a('number');",
											"    pm.expect(responseData.id).to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"The 'nome' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"pm.test(\"Response has required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.dono).to.exist;",
											"    pm.expect(responseData.id).to.exist;",
											"    pm.expect(responseData.nascimento).to.exist;",
											"    pm.expect(responseData.nome).to.exist;",
											"    pm.expect(responseData.raca).to.exist;",
											"    pm.expect(responseData.sexo).to.exist;",
											"    pm.expect(responseData.tipo).to.exist;",
											"});",
											"",
											"",
											"pm.test(\"ID is in a valid format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.id).to.exist;",
											"  pm.expect(responseData.id).to.match(/^\\d+$/, \"ID should be a valid number\");",
											"});",
											"",
											"",
											"pm.test(\"The 'raca' field is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.raca).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"The 'tipo' field is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.tipo).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"dono\": {\r\n        \"id\": 1\r\n    },\r\n    \"nascimento\": \"2023-10-05\",\r\n    \"nome\": \"Pith Bitoca\",\r\n    \"raca\": \"Bull Terrier\",\r\n    \"servicos\": null,\r\n    \"sexo\": \"MASCULINO\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/cachorro/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"cachorro",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "GATO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Email is in a valid format\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.dono).to.be.an('object');",
											"    pm.expect(responseData.dono.email).to.exist.and.to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
											"});",
											"",
											"",
											"pm.test(\"Validate that 'id' is a non-zero integer\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.id).to.be.a('number');",
											"  pm.expect(responseData.id).to.be.above(0);",
											"});",
											"pm.test(\"Dono's email is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.dono.email).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Nascimento is in a valid date format\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/, \"Nascimento should be in the format YYYY-MM-DD\");",
											"});",
											"",
											"",
											"pm.test(\"Nome is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.nome).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Raca is a non-empty string\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.raca).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"dono\": {\r\n        \"id\": 1\r\n    },\r\n    \"nascimento\": \"2023-10-05\",\r\n    \"nome\": \"Siam√™s\",\r\n    \"raca\": \"Rasga Saco\",\r\n    \"servicos\": null,\r\n    \"sexo\": \"MASCULINO\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost/api/gato/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"path": [
										"api",
										"gato",
										"2"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "Aqui voc√™ poder√° cadastrar o seu Pet:\n\n<img src=\"https://content.pstmn.io/9fb0fe96-2d45-487e-9082-c43f87f34d9a/aW1hZ2UucG5n\" width=\"2010\" height=\"668\">",
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "key",
						"value": "privateKey",
						"type": "string"
					},
					{
						"key": "value",
						"value": "eyJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpdGllcyI6W3siaWQiOjEsIm5vbWUiOiJjbGllbnRlIn1dLCJwZXNzb2EiOiJCZW5lZnJhbmNpcyBkbyBOYXNjaW1lbnRvIiwiZXhwIjoxNjk2NjI3NTkzfQ.XgaMaN2W0yHar_YbAu6LfldxOy3dXnzit3HudGGU7-4",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "004 - SERVICO",
			"item": [
				{
					"name": "BANHO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Response array is empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('array');",
									"  pm.expect(responseData).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/api/banho",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"banho"
							]
						}
					},
					"response": []
				},
				{
					"name": "BANHO/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"The 'abertura' field is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.abertura).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Validate that 'animal' object is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.animal).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The 'dono' object is present in the 'animal' object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.animal).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.animal.dono).to.exist.and.to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'email' field is present in the 'dono' object\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.dono).to.exist.and.to.be.an('object');",
									"  pm.expect(responseData.dono.email).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/api/banho/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"banho",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "BANHO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.abertura).to.exist;",
									"    pm.expect(responseData.animal).to.exist;",
									"    pm.expect(responseData.descricao).to.exist;",
									"    pm.expect(responseData.id).to.exist;",
									"    pm.expect(responseData.valor).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Valor is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.valor).to.be.a('number');",
									"    pm.expect(responseData.valor).to.be.at.least(0);",
									"});",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.abertura).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.animal).to.exist.and.to.be.an('object');",
									"  pm.expect(responseData.descricao).to.exist.and.to.be.a('string');",
									"  pm.expect(responseData.id).to.exist.and.to.be.a('number');",
									"  pm.expect(responseData.valor).to.exist.and.to.be.a('number');",
									"});",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.animal.dono.email).to.exist.and.to.match(/^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)*(\\.[a-zA-Z]{2,})$/);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"animal\": {\r\n        \"id\": 1\r\n    },\r\n    \"descricao\": \"Banho de Perfume\",\r\n    \"valor\": 50\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/api/banho",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"banho"
							]
						}
					},
					"response": []
				},
				{
					"name": "TOSA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"The 'abertura' field should exist and not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.abertura).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'descricao' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.descricao).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Validate 'nascimento' field in 'dono' is a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.animal).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.animal.dono).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.animal.dono.nascimento).to.exist.and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"Validate 'nascimento' field in 'animal' is a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.animal).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.animal.nascimento).to.exist.and.to.match(/^\\d{4}-\\d{2}-\\d{2}$/, \"Invalid date format\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"animal\": {\r\n        \"id\": 2\r\n    },\r\n    \"descricao\": \"Tosa na R√©gua\",\r\n    \"valor\": 459\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/api/tosa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"tosa"
							]
						}
					},
					"response": []
				},
				{
					"name": "TOSA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    pm.expect(responseData).to.have.lengthOf.at.least(1);",
									"});",
									"",
									"",
									"pm.test(\"The nome field in the animal object is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"        pm.expect(item.animal).to.exist.and.to.be.an('object');",
									"        pm.expect(item.animal.nome).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/api/tosa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"tosa"
							]
						}
					},
					"response": []
				},
				{
					"name": "TOSA/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"The 'abertura' field should not be empty\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.abertura).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'animal' object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.animal).to.exist;",
									"    pm.expect(responseData.animal).to.be.an('object');",
									"});",
									"",
									"",
									"pm.test(\"The email field within the dono object is not empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.dono.email).to.exist.and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost/api/tosa/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"tosa",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "CONSULTA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									"",
									"",
									"pm.test(\"The 'abertura' field should exist and not be empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.abertura).to.exist.and.to.not.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Validate that the 'descricao' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.descricao).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"animal\": {\r\n        \"id\": 2\r\n    },\r\n    \"descricao\": \"Consulta com o Dr. Dolittle\",\r\n    \"valor\": 1500\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/api/consulta",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"consulta"
							]
						}
					},
					"response": []
				},
				{
					"name": "CONSULTA/id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'abertura' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.abertura).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'descricao' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.descricao).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The 'valor' field should exist and be a number\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.valor).to.exist.and.to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/api/consulta/4",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"consulta",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "CONSULTA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"The array length must be greater than zero\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.has.lengthOf.at.least(1, \"Array should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'abertura' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.abertura).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Verify that the 'valor' field is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (item) {",
									"        pm.expect(item.valor).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/api/consulta",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"consulta"
							]
						}
					},
					"response": []
				},
				{
					"name": "CONSULTA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'abertura' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.abertura).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"The 'descricao' field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.descricao).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"animal\": {\r\n        \"id\": 1\r\n    },\r\n    \"descricao\": \"Consulta com o Dr. Dolittle\",\r\n    \"valor\": 300\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/api/consulta/3",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"consulta",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "BANHO",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'abertura' field\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.abertura).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'descricao' field\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.descricao).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'valor' field\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.valor).to.exist.and.to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"animal\": {\r\n        \"id\": 1\r\n    },\r\n    \"descricao\": \"Banho de Perfume de laranja\",\r\n    \"valor\": 150\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/api/banho/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"banho",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "TOSA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'abertura' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.abertura).to.exist.and.to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.animal.dono.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"The 'dono' object should exist and be an object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.dono).to.exist.and.to.be.an('object');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"animal\": {\r\n        \"id\": 1\r\n    },\r\n    \"descricao\": \"Tosa na R√©gua e no compasso\",\r\n    \"valor\": 49\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/api/tosa/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"api",
								"tosa",
								"2"
							]
						}
					},
					"response": []
				}
			],
			"description": "Aqui √© poss√≠vel realizar o cadastramento de um servi√ßo prestado pelo Petshop:  \n  \n\n<img src=\"https://content.pstmn.io/e3b75eff-25cc-4224-a7ed-8fa59ff4af1c/aW1hZ2UucG5n\" alt=\"Exemplo%20do%20cadastramento%20de%20um%20servi√ßo\" height=\"781\" width=\"2015\">"
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "privateKey",
				"type": "string"
			},
			{
				"key": "value",
				"value": "eyJhbGciOiJIUzI1NiJ9.eyJhdXRob3JpdGllcyI6W3siaWQiOjEsIm5vbWUiOiJjbGllbnRlIn1dLCJwZXNzb2EiOiJCZW5lZnJhbmNpcyBkbyBOYXNjaW1lbnRvIiwiZXhwIjoxNjk2NjM3MTY4fQ.4VaZHnu29N-TTRt42mXEEyxeUB2T2CFbKcHKOOMrp-k",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}